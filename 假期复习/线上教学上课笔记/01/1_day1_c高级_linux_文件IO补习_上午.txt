一、C高级复习
[习题1]
下面两个变量定义, 分析p的类型, sizeof(p) 是多少  (3分钟思考时间)
1) int *p[3];		//p  整形指针数组，3各元素 每个元素 int *, sizeof(p) 12 
			//  | int * | int * | int * |		
2) int (*p)[3];		//p 是指针, sizeof(p)  4

讲解:
1)先看优先级( [] 优先级高于*, 所以p是数组, 前面是int *, 所以整形指针数组)
2)   ( ) 优先级最高,所以 p是指针, 什么指针 指向  int [3]的指针

扩展练习:
1) 有如下数组, 写一个函数, 分别输出各字符串      (5-10分钟)
char *s[] = {"yang", "li", "liu", "wang", "zhang"};
s  数组,  字符指针数组, 元素个数，编译器自动分析出来的
sizeof(s) --->  20

#include <stdio.h>
void print_s(char *p[], int n)
{
	int i;
	for(i = 0; i < n; i++)	//这不可以写sizeof(p) / sizeof(p[0])
	{
		printf("%s\n", p[i]);
	}
}
int main()
{
	char *s[] = {"yang", "li", "liu", "wang", "zhang"};
	print_s(s, sizeof(s) / sizeof(sizeof(s[0])));	//参数   数组s 和元素个数
}
//sizeof(s) 20,  s[0] 的类型是char *  sizeof(s[0]) -->5
//yang\n,   li\n ....
//如果输出sizeof(s)  , printf("%d\n", sizeof(s));

2) 有如下数组，写一个函数，输出所有值            (5-10分钟)
int a[3][4] = {{1,2,3,4},{5,6,7,8},{9,10,11,12}};

#include <stdio.h>
void print_a(int (*p)[4], int n)	// 注意, 4不能省略
{
	int i, j;
	for(i = 0; i < n; i++)
	{
		for(j = 0; j < 4; j++)
		{
			printf("%d, ", p[i][j]);	//*(p + i)[j]
		}
		printf("\n");
	}
}
int main()
{
	int a[3][4] = {{1,2,3,4},{5,6,7,8},{9,10,11,12}};	
	print_a(a, 3);
}
//1,2,3,4  5,6,7,8  9,10,11,12

[习题2]
下面变量定义, 分析p的类型, sizeof(p) 是多少     (2分钟思考时间)
int (*p[4])(int, int);

讲解:
p[4]  p是数组,  * 指针数组----> 函数指针数组, 
sizeof(p) ---> 16


[习题4]
看下面程序，挑错                 (3分钟)
#include <stdio.h>
#include <stdlib.h>
void get_memory(int *q)
{
	q = malloc(10 * sizeof(int));
}

int main()
{
	int i;
	int *p;
	get_memory(p);		//p 值传递，改变不了p的值
	for(i = 0; i < 10; i++)
	{
		p[i] = i;
	}
	for(i = 0; i < 10; i++)
	{
		printf("%d\n", p[i]);
	}	
}

讲解：
#include <stdio.h>
#include <stdlib.h>
void get_memory(int **q)
{
	*q = malloc(10 * sizeof(int));
}
int main()
{
	int i;
	int *p;
	get_memory(&p);		//p 值传递，改变不了p的值
	for(i = 0; i < 10; i++)
	{
		p[i] = i;
	}
	for(i = 0; i < 10; i++)
	{
		printf("%d\n", p[i]);
	}	
}

[习题6]             (5分钟)
定义一个宏，ALIGN_DOWN, 有两个参数(x, a) 功能是找到小于x的能被a整除的最大值 
      如:  ALIGN_DOWN(65, 4),   那么它的值是64
#define ALIGN_DOWN(x, a) ((x) - (x) % (a))

定义一个宏，ALIGN_UP, 有两个参数(x, a) 功能是找到大于x的能被a整除的最小值 
      如:  ALIGN_UP(65, 4),   那么它的值是68
#define ALIGN_UP(x, a) ((x) + (a) - (x) % (a))

65 / 4  * 4
(65 / 4 + 1)  * 4

上午作业
1) 如下代码, 挑错
	int i;
	int *p = malloc(10);

	for(i = 0; i < 10; i++)
	{
		p[i]= i;
	}
	for(i = 0; i < 10; i++)
	{
		printf("%d\n", p[i]);
	}

2) 写一个函数，完成字符串连接                   

