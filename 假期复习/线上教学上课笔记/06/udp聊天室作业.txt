/////server.c
#include <arpa/inet.h>
#include <sys/socket.h>
#include <pthread.h>
#include <stdio.h>
#include <string.h>
struct info
{
	int type;   //1 上线   2 下线   3 消息
	char buf[100];	//消息正文
};

///保存客户端的ip地址和端口号
struct sockaddr_in client_addr[100] = { 0 };
int count = 0;   //代表客户端上线人数
int fd;
void send_info(char *buf, struct sockaddr_in *addr)
{
	int i;
	char buf1[100] = { 0 };
	sprintf(buf1, "%d:%s", addr->sin_port, buf);
	for(i = 0; i < count; i++)
	{
		//有bug, 不应该转发给自己
		sendto(fd, buf1, strlen(buf1) + 1, 0, (struct sockaddr *)&client_addr[i], sizeof(struct sockaddr));
	}
}
void logout(struct sockaddr_in *addr)
{
	int i, j;
	for(i = 0; i < count; i++)
	{
		if((client_addr[i].sin_port == addr->sin_port) && 
			(client_addr[i].sin_addr.s_addr == addr->sin_addr.s_addr))
		{
			//找到下线的了
			for(j = i; j < count; j++)
			{
				client_addr[j] = client_addr[j + 1]; 
			}	
			count--;
			break;	
		}
	}		
}
int main()
{
	int len = sizeof(struct sockaddr);
	struct sockaddr_in youaddr;
	struct info s;
	struct sockaddr_in myaddr;
	fd = socket(AF_INET, SOCK_DGRAM, 0);
	myaddr.sin_family = AF_INET;
	myaddr.sin_port = htons(55555);   //不要超过65535
	myaddr.sin_addr.s_addr = htonl(INADDR_ANY);  //inet_addr("127.0.0.1");

	bind(fd, (struct sockaddr *)&myaddr, sizeof(myaddr));
	while(1)
	{
		recvfrom(fd, &s, sizeof(s), 0, (struct sockaddr *)&youaddr, &len);
		printf("%s %d:type %d\n", inet_ntoa(youaddr.sin_addr), htons(youaddr.sin_port), s.type);		
		if(s.type == 1)
		{
			//有人上线，将此人添加进上线数组，转发上线信息
			send_info("login", &youaddr);
			//有bug， 应该判断是否重复上线
			client_addr[count] = youaddr;
			count++;
		}
		else if(s.type == 2)
		{
			//有人下线，转发下线信息
			send_info("logout", &youaddr);
			logout(&youaddr);
		}
		else if(s.type == 3)
		{
			//有消息发过来，转发给其他人
			send_info(s.buf, &youaddr);
		}
	}
}

/////client.c
#include <stdio.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <string.h>
#include <stdlib.h>
struct info
{
	int type;   //1 上线   2 下线   3 消息
	char buf[100];	//消息正文
};
int len;
int fd;
struct info s = { 0 };
struct sockaddr_in youaddr;
struct sockaddr_in addr;
void *send_fun(void *p)
{
	while(1)
	{
		gets(s.buf);
		s.type = 3;
		if(strcmp(s.buf, "logout") == 0)
		{
			s.type = 2;
			sendto(fd, &s, sizeof(s), 0, (struct sockaddr*)&youaddr, 16);	//12345
			exit(0);
		}
		sendto(fd, &s, sizeof(s), 0, (struct sockaddr*)&youaddr, 16);
	}
}
int main(int argc, char *argv[])
{	
	len = sizeof(struct sockaddr);
	fd = socket(AF_INET, SOCK_DGRAM, 0);
	pthread_t id;
	if(argc < 2)
	{
		printf("param error\n");
		return -1;
	}
	youaddr.sin_family = AF_INET;
	youaddr.sin_port = htons(55555);
	youaddr.sin_addr.s_addr = inet_addr(argv[1]);   
	s.type = 1;
	sendto(fd, &s, sizeof(s), 0, (struct sockaddr *)&youaddr, sizeof(struct sockaddr));
	pthread_create(&id, NULL, send_fun,NULL);
	while(1)
	{
		recvfrom(fd, &s, sizeof(s), 0, (struct sockaddr *)&addr, &len);	
		printf("%s\n", s.buf);
	}
}