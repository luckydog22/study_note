///send.c
#include <sys/socket.h>
#include <arpa/inet.h>
#include <stdio.h>

int main()
{
	char buf[100] = { 0 };
	int fd = socket(AF_INET, SOCK_DGRAM, 0);
	struct sockaddr_in toaddr;
	toaddr.sin_family = AF_INET;
	toaddr.sin_port = htons(8888);
	toaddr.sin_addr.s_addr = inet_addr("224.10.10.10");

	scanf("%s", buf);
	sendto(fd, buf, sizeof(buf), 0, (struct sockaddr *)&toaddr, sizeof(toaddr));
}

////recv.c
#include <sys/socket.h>
#include <arpa/inet.h>
#include <stdio.h>

int main()
{
	char buf[100] = { 0 };
	int len = sizeof(struct sockaddr);
	struct sockaddr youaddr;
	int fd = socket(AF_INET, SOCK_DGRAM, 0);

	struct sockaddr_in myaddr,  peeraddr;   //peeraddr  组播地址
	struct ip_mreq mreq;   //里面保存本地IP地址和组播地址，当设定完，本地IP地址就和组播地址关联到一起			
	mreq.imr_multiaddr.s_addr = inet_addr("224.10.10.10");  //设定组播地址
	mreq.imr_interface.s_addr = htonl(INADDR_ANY);       //设定本地地址
	setsockopt(fd, IPPROTO_IP, IP_ADD_MEMBERSHIP, &mreq, sizeof(mreq));

	peeraddr.sin_family = AF_INET;
	peeraddr.sin_port = htons(8888);
	peeraddr.sin_addr.s_addr = inet_addr("224.10.10.10");
	bind(fd, (struct sockaddr *)&peeraddr, sizeof(peeraddr));
	while(1)
	{
		recvfrom(fd, buf, sizeof(buf), 0, &youaddr, &len);
		printf("recv is %s\n", buf);
	}
}